[project]
name = "django-guardian"
version = "3.1.2"
description = "Per object permissions for Django"
keywords = ["django", "permissions", "authorization", "object", "row", "level"]
readme = "README.md"
license = { text = "BSD-2-Clause" }
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    'Environment :: Web Environment',
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: BSD License",
    'Framework :: Django',
    'Framework :: Django :: 3.2',
    'Framework :: Django :: 4.1',
    'Framework :: Django :: 4.2',
    'Framework :: Django :: 5.0',
    'Framework :: Django :: 5.1',
    'Framework :: Django :: 5.2',
    'Programming Language :: Python',
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    'Topic :: Security',
]
authors = [
  # In order of first contribution...
  # New contributors please add your name at the end :)
  { name = "Lukasz Balcerzak", email = "lukaszbalcerzak@gmail.com" },
  { name = "Cesar Canassa", email = "cesar.canassa@gmail.com" },
  { name = "Vincent Driessen", email = "vincent@datafox.nl" },
  { name = "John Hensley", email = "john@fairviewcomputing.com" },
  { name = "Ramanan Sivaranjan", email = "ramanan@funkaoshi.com" },
  { name = "Woosuk Suh", email = "pipoket88@gmail.com" },
  { name = "Bojan Mihelac", email = "bmihelac@mihelac.org" },
  { name = "Rafael Ponieman", email = "rafadev@gmail.com" },
  { name = "Daniel Sokolowski", email = "daniel.sokolowski@danols.com" },
  { name = "Ali Lozano", email = "alilozanoc@gmail.com" },
  { name = "BJ Dierkes", email = "derks@bjdierkes.com" },
  { name = "Rach Belaid", email = "rachid.belaid@gmail.com" },
  { name = "Michael Crosby", email = "crosby.michael@gmail.com" },
  { name = "Greg Hinch", email = "greg@greghinch.com" },
  { name = "Aram Dulyan", email = "aram@dulyan.com" },
  { name = "Florian Hahn", email = "flo@fhahn.com" },
  { name = "Piotr Kilczuk", email = "piotr@tymaszweb.pl" },
  { name = "Reavis Sutphin-Gray", email = "reavis@sutphin-gray.com" },
  { name = "Adrián López", email = "adrianlopezcalvo@hotmail.com" },
  { name = "Jameel Al-Aziz", email = "me@jalaziz.net" },
  { name = "John P. Neumann", email = "arrantsquid@gmail.com" },
  { name = "Andreas Madsack", email = "andreas@madflex.de" },
  { name = "Ivan Kharlamov", email = "the.paper.men@gmail.com" },
  { name = "Miguel de Val-Borro", email = "miguel.deval@gmail.com" },
  { name = "Jan Nakladal", email = "mojeto1@gmail.com" },
  { name = "Yonel Ceruto", email = "yceruto@abalt.org" },
  { name = "Luke Faraone", email = "lfaraone@humbughq.com" },
  { name = "John Wegis", email = "john@presencelearning.com" },
  { name = "Florentin Sardan", email = "florentin.sardan@gmail.com" },
  { name = "Geoff Greer", email = "geoff@greer.fm" },
  { name = "Hans Larsen", email = "hans@hansl.ca" },
  { name = "Fabio C. Barrionuevo da Luz", email = "bnafta@gmail.com" },
  { name = "Tomasz Wsuł", email = "2nickers@gmail.com" },
  { name = "Xavier Ordoquy", email = "xordoquy@linovia.com" },
  { name = "Joshua Bonnett", email = "joshua.bonnett@gmail.com" },
  { name = "Jernej Kos", email = "jernej@kos.mx" },
  { name = "Bruno Ribeiro da Silva", email = "bruno@e3c.com.br" },
  { name = "Cezar Jenkins", email = "emperorcezar@gmail.com" },
  { name = "Warren Volz", email = "warren@warrenvolz.com" },
  { name = "Omer Katz", email = "omer.drow@gmail.com" },
  { name = "Vishal Lal", email = "vish61@gmail.com" },
  { name = "Steven DeMartini", email = "sjd@yelp.com" },
  { name = "zauddelig", email = "zauddelig@gmail.com" },
  { name = "Remco Wendt", email = "remco.wendt@gmail.com" },
  { name = "Kevin London", email = "kevinlondon@gmail.com" },
  { name = "Kouhei Maeda", email = "mkouhei@gmail.com" },
  { name = "Samuel Sutch", email = "sam@sutch.net" },
  { name = "Morgan Aubert", email = "morgan.aubert@zoho.com" },
  { name = "Brian May", email = "brian@microcomaustralia.com.au" },
  { name = "Troy Grosfield", email = "troy.grosfield@gmail.com" },
  { name = "Michael Drescher", email = "kaesemeister@gmail.com" },
  { name = "Verena Jaspersen", email = "verena.jaspersen@gmail.com" },
  { name = "Bertrand Svetchine", email = "bertrand.svetchine@gmail.com" },
  { name = "Frank Wickström", email = "frank@bambuser.com" },
  { name = "George Karakostas", email = "gckarakostas@gmail.com" },
  { name = "Adam Dobrawy", email = "guardian@jawnosc.tk" },
  { name = "Jeff Hackshaw", email = "intrepidevio@gmail.com" },
  { name = "Chase Bennett", email = "ch@se.gd" },
  { name = "Jonny Arnold", email = "jonny.arnold89@gmail.com" },
  { name = "Davis Raymond Muro", email = "davisraymondmuro@gmail.com" },
  { name = "Richard de Wit", email = "henk.exe@gmail.com" },
  { name = "Pedro Rojas Gavidia", email = "pedrorojas.gavidia@gmail.com" },
  { name = "Rainshaw Gao", email = "rxg@live.com" },
  {name = "Tom Clark", email = "guardian@octue.com"},
  { name = "Meredith Hoo", email = "meredith.hoo1@gmail.com" },
  { name = "Chris Maggiuli" },
  { name = "Bona Fide IT GmbH"},
  { name = "Columbia University, SIS Development and Application Services" },
  { name = "Cornelius Hoffmann", email = "coding@volucra.de" },
  { name = "Sezer BOZKIR", email = "admin@sezerbozkir.com"},
]
maintainers = [
  {name = "Tom Clark", email = "django-guardian@octue.com"},
  { name = "Brian May", email = "brian@microcomaustralia.com.au" },
  { name = "Lukasz Balcerzak", email = "lukaszbalcerzak@gmail.com" },
  { name = "Adam Dobrawy", email = "guardian@jawnosc.tk" },
  { name = "David Graham", email = "dpgraham4401@gmail.com" },
  { name = "Michael K." },
  { name = "Chris Maggiuli" },
  { name = "Bona Fide IT GmbH"},
  { name = "Sezer BOZKIR", email = "admin@sezerbozkir.com"},

]
dependencies = [
    "django>=3.2",
    "typing_extensions>=4.12.0; python_version<'3.13'",
]

[project.urls]
Homepage = "https://github.com/django-guardian/django-guardian"
Documentation = "https://django-guardian.readthedocs.io/"
Repository = "https://github.com/django-guardian/django-guardian"
Issues = "https://github.com/me/spam/issues"
Changelog = "https://github.com/django-guardian/django-guardian/releases"

[dependency-groups]
dev = [
    "django-environ>=0.12.0",
    "pytest>=8.3.4",
    "pytest-cov>=5.0.0",
    "pytest-django>=4.9.0",
    "tox>=4.26.0",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.12",
    "mkdocs-material-extensions>=1.3.1",
    "mkdocstrings>=0.29.1",
    "mkdocstrings-python>=1.16.10",
    "mypy>=1.15.0",
    "pre-commit>=4.2.0",
    "pyupgrade>=3.20.0",
    "ruff>=0.12.0"
]
ci = [
    "psycopg2-binary>=2.9.10",
    "mysqlclient>=2.2.7",
    {include-group = "dev"}
]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes
# select = ["E", "F"]
# Ignore E501 line-too-long which can self-conflict with ruff format - see https://docs.astral.sh/ruff/faq/#is-the-ruff-linter-compatible-with-black for why
ignore = ["E501"]
# Disable fix for unused imports (`F401`) which annoyingly removes your work-in-progress on save
unfixable = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["benchmarks", "docs", "example_project", "example_project_custom_group", "guardian"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
force-sort-within-sections = true

[tool.setuptools]
packages = [
    "guardian",
    "guardian.conf",
    "guardian.management",
    "guardian.management.commands",
    "guardian.migrations",
    "guardian.templatetags",
    "guardian.testapp",
    "guardian.testapp.migrations",
    "guardian.testapp.tests"
]

[tool.setuptools.package-data]
guardian = ["py.typed"]

[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[tool.mypy]
ignore_missing_imports = true
show_error_codes = true
exclude = "example*|guardian/testapp/*"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "guardian.testapp.testsettings"
filterwarnings = [
    "once::DeprecationWarning",
    "once::PendingDeprecationWarning",
]
