---
name: Tests

on:
  push:
    branches:
      - master
      - devel
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        django: [2.2.17, 3.0.11, 3.1.3, 3.2.0]
        include:
          - python-version: 3.8
            django: main
          - python-version: 3.9
            django: main

    services:
      mariadb:
        image: mariadb:10.1
        env:
          MYSQL_ROOT_PASSWORD: mariadb
        ports:
          - 3306:3306
      postgres:
        image: postgres:10-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install latest pip, setuptools, and wheel
        run: |
          python -m pip install --upgrade pip wheel setuptools
      - name: Install dependencies
        run: |
          PACKAGES=('mock' 'pytest' 'pytest-django' 'pytest-cov' 'django-environ' 'setuptools_scm' 'pyupgrade' 'psycopg2-binary' 'mysqlclient')
          if [[ "${{ matrix.django }}" == 'main' ]]; then
              PACKAGES+=('https://github.com/django/django/archive/main.tar.gz');
          else
              PACKAGES+=("Django~=${{ matrix.django }}");
          fi;

          PGPASSWORD="postgres" psql -c 'create database django_guardian;' -h localhost -U postgres;
          PGPASSWORD="postgres" psql -c 'create database test_django_guardian;' -h localhost -U postgres;

          mysql --host=127.0.0.1 --user=root --password=mariadb -e 'CREATE DATABASE django_guardian;';
          mysql --host=127.0.0.1 --user=root --password=mariadb -e 'CREATE DATABASE test_django_guardian;';

          python -m pip install --upgrade --upgrade-strategy=only-if-needed ${PACKAGES[*]};
      - name: Ensure no version conflicts exist
        run: pip check
      - name: Lint modern PY3 syntax
        run: find . -name '*.py' | xargs pyupgrade --py3-only

      - name: Code tests (with PostgreSQL)
        run: |
          export DATABASE_URL=postgres://postgres:postgres@localhost/django_guardian
          python ./setup.py --version
          py.test --cov=guardian

      - name: Code tests (with MariaDB)
        run: |
          export DATABASE_URL=mysql://root:mariadb@127.0.0.1:3306/django_guardian
          python ./setup.py --version
          py.test --cov=guardian

      - name: Code tests (with SQLite)
        run: |
          export DATABASE_URL=sqlite://
          python ./setup.py --version
          py.test --cov=guardian

      - name: Test example_project
        run: |
          pip install .;
          cd example_project;
          DJANGO_VERSION="${{ matrix.django }}"
          EXAMPLE_PROJECTS_DJANGO_VERSION=$(grep -i "django[^-]" requirements.txt | cut -d "=" -f 2)
          if [ "${DJANGO_VERSION:0:3}" = "${EXAMPLE_PROJECTS_DJANGO_VERSION:0:3}" ]; then
              python -Wa manage.py makemigrations --check --dry-run;
          elif [ -z "${EXAMPLE_PROJECTS_DJANGO_VERSION}" ]; then
              echo "Could not determine which version of Django the example project supports."
              exit 1
          fi;

          export DATABASE_URL=postgres://postgres:postgres@localhost/django_guardian
          python -Wa manage.py test;

          export DATABASE_URL=mysql://root:mariadb@127.0.0.1:3306/django_guardian
          python -Wa manage.py test;

          export DATABASE_URL=sqlite://
          python -Wa manage.py test;
